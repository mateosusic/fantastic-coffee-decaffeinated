openapi: 3.0.3
servers:
  - url: "http://localhost:3000"
info:
  title: WASAText Project API
  version: 1.0.0
  description: This OpenAPI document describes the WASAText Project API, and its required endpoints.
tags:
  - name: "Login"
    description: |
      Loging in the app
  - name: "User"
    description: |
     A User interactions
  - name: "Conversation"
    description: |
      Conversations methods
  - name: "Group"
    description: |
      Groups managment
  - name: "Message"
    description: |
      Messages
  - name: "Comment"
    description: |
      Comments

paths:
  /session:
    post:
      tags: [Login]
      operationId: doLogin
      summary: Login in the site
      description: |
        If user exists, ID is returned.
        If it doesnt exist, ID is created
      requestBody:
        content:
          application/json:
            schema:
              description: Username
              type: object
              properties:
                name: { $ref: "#/components/schemas/Name" }
        required: true
      responses:
        "200":
          description: Succesfully logged in
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Identification" }
        "201":
          description: Account created succesfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Identification" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
#USER TAG
  /users:
    parameters:
      - name: searched_user
        in: query
        required: true
        description: the username to search a user
        schema: { $ref: "#/components/schemas/Name" }
    get:
      tags: ["User"]
      operationId: FindUsers
      summary: List out the User 
      description: |-
        Get the list of Users that match with the username specified in the query.
      responses:
        "200":
          description: Get the list of profiles corrisponding with the username searched
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ProfilesList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{user}/username:
    parameters:
      - $ref: "#/components/parameters/user"
    put:
      tags: [User]
      operationId: setMyUserName
      summary: Set username of the person using the application
      description: |
        Taking a name from the requestBody, replace the
        username actually used from the person with the new one
      requestBody:
        content:
          application/json:
            schema:
              description: New name, to replace the current user name
              type: object
              properties:
                new_name: { $ref: "#/components/schemas/Name" }
        required: true
      responses:
        "200":
          description: The user name was set successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
  /users/{user}/photo:
    parameters:
      - $ref: "#/components/parameters/user"
    put:
      tags: [User]
      operationId: setMyPhoto
      summary: Set profile image
      description: |
        Set the user's profile image 
      requestBody:
        content:
          application/json:
            schema:
              description: Photo to upload in the profile picture
              type: object
              properties:
                picture: { $ref: "#/components/schemas/Photo" }
        required: true
      responses:
        "200":
          description: The photo was uploaded succesfully
          content:
            plain/text:
              schema: { $ref: "#/components/schemas/Completed" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
  /users/{user}/groups:
    parameters:
      - $ref: "#/components/parameters/user"
    post:
      tags: [Group]
      operationId: createGroup
      summary: Create the Group
      description: |
       Take a Group name from the user and create a group with the default name
      requestBody:
        content:
          application/json:
            schema:
              description: Name for the new group
              type: object
              properties:
                name: { $ref: "#/components/schemas/Name" }
                users: { $ref: "#/components/schemas/ProfilesList" }
        required: true
      responses:
        "201":
          description: Group created succesfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Group" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /users/{user}/groups/{group}:
    parameters:
      - $ref: "#/components/parameters/user"
      - $ref: "#/components/parameters/group"
    put:
      parameters:
        - name: add_user
          in: query
          required: true
          description: User to add
          schema: { $ref: "#/components/schemas/ProfilesList" }
      tags: [Group]
      operationId: addToGroup
      summary: add the user to a specified group
      description: |
       Add a specific user to a specific group
      responses:
        "200":
          description: The user was added to the group
          content:
            plain/text:
              schema: { $ref: "#/components/schemas/Completed" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: [Group]
      operationId: leaveGroup
      summary: Leave from the group
      description: |
        Option for a user to leave the group
      responses:
        "200":
          description: User {userid} has left the groupchat
          content:
            plain/text:
              schema: { $ref: "#/components/schemas/Completed" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /users/{user}/groups/{group}/groupname:
    parameters:
      - $ref: "#/components/parameters/user"
      - $ref: "#/components/parameters/group"
    put:
      tags: [Group]
      operationId: setGroupName
      summary: set name of the group
      description: |
        Set a new name to the group
      requestBody:
        content:
          application/json:
            schema:
              description: New name for the group
              type: object
              properties:
                name: { $ref: "#/components/schemas/Name" }
        required: true
      responses:
        "200":
          description: The group name was set succesfully
          content:
            plain/text:
              schema: { $ref: "#/components/schemas/Completed" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
  /users/{user}/groups/{group}/grouphoto:
    parameters:
      - $ref: "#/components/parameters/user"
      - $ref: "#/components/parameters/group"
    put:
      tags: [Group]
      operationId: setGroupPhoto
      summary: set group picture
      description: |
        Set the group picture
      requestBody:
        content:
          application/json:
            schema:
              description: Group picture
              type: object
              properties:
                picture: { $ref: "#/components/schemas/Photo" }
        required: true
      responses:
        "200":
          description: The photo was uploaded succesfully
          content:
            plain/text:
              schema: { $ref: "#/components/schemas/Completed" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }

  # Tag Conversation
  /users/{user}/conversations:
    parameters:
      - $ref: "#/components/parameters/user"
    get:
      tags: [Conversation]
      operationId: getMyConversations
      summary: Get all user's conversation 
      description: |
        Retrun the list of all user's conversations 
      responses:
        "200":
          description: Succesfully listed conversations
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ConversationCollection" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /users/{user}/conversations/{conversation_id}:
    parameters:
      - $ref: "#/components/parameters/user"
      - $ref: "#/components/parameters/conv"
    put:
      tags: [Conversation]
      operationId: createConversation
      summary: Create a new conversation
      description: |
        Create a new conversation.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Message" }
        required: false
      responses:
        "200":
          description: Created Conversation
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Conversation" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    get:
      tags: [Conversation]
      operationId: getConversation
      summary: Get a conversation
      description: |
        Return the conversation defined with conv_id:
      responses:
        "200":
          description: Conversation got succesfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Conversation" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  # Message Tag
  /users/{user}/conversations/{conversation_id}/messages:
    parameters:
      - $ref: "#/components/parameters/user"
      - $ref: "#/components/parameters/conv"
    post:
      parameters:
        - name: Message
          description: Send a message to someone
          in: query
          required: false
          schema: { $ref: "#/components/schemas/Identification" }
      tags: [Message]
      operationId: sendMessage
      summary: Send message to a conversation
      description: Send the message 
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/SentMessage" }
      responses:
        "201":
          description: Message sent succesfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Message" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /users/{user}/conversations/{conversation_id}/messages/{message}:
    parameters:
      - $ref: "#/components/parameters/user"
      - $ref: "#/components/parameters/conv"
      - $ref: "#/components/parameters/msg"
    post:
      parameters:
        - name: destination_conv_id
          description: Where should the message be sent
          in: query
          required: true
          schema: { $ref: "#/components/schemas/Identification" }
      tags: [Message]
      operationId: forwardMessage
      summary: Forwarding the message
      description: |
       Forwarding the message from one conversation to another
      responses:
        "201":
          description: Message forwarded succesfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Message" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: [Message]
      operationId: deleteMessage
      summary: Delete a message
      description: Delete a message from the conversation
      responses:
        "200":
          description: The message was deleted succesfully
          content:
            plain/text:
              schema: { $ref: "#/components/schemas/Completed" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  # Comment TAG
  /users/{user}/conversations/{conversation_id}/messages/{message}/reactions:
    parameters:
      - $ref: "#/components/parameters/user"
      - $ref: "#/components/parameters/conv"
      - $ref: "#/components/parameters/msg"
    post:
      tags: [Comment]
      operationId: commentMessage
      summary: Commenting message
      description: Commenting a message in conversation
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Reaction" }
      responses:
        "201":
          description: Message commented succesfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Reaction" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /users/{user}/conversations/{conversation_id}/messages/{message}/reactions/{reaction}:
    parameters:
      - $ref: "#/components/parameters/user"
      - $ref: "#/components/parameters/conv"
      - $ref: "#/components/parameters/msg"
      - $ref: "#/components/parameters/react"
    delete:
      tags: [Comment]
      operationId: uncommentMessage
      summary: Uncomment a message
      description: Delete the comment
      responses:
        "200":
          description: The comment was deleted succesfully
          content:
            plain/text:
              schema: { $ref: "#/components/schemas/Completed" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }    

components:
  parameters:
    user:
      name: user
      in: path
      required: true
      description: Id of the user that is using the app
      schema: { $ref: "#/components/schemas/Identification" }
    group:
      name: group
      in: path
      required: true
      description: ID of a group
      schema: { $ref: "#/components/schemas/Identification" }
    conv:
      name: conversation_id
      in: path
      required: true
      description: Id of the conversation where the message is being sent
      schema: { $ref: "#/components/schemas/Identification" }
    msg:
      name: message
      in: path
      required: true
      description: ID of the message with which the user wants to use operations
      schema: { $ref: "#/components/schemas/Identification" }
    react:
      name: reaction
      in: path
      required: true
      description: ID of the comment of a message
      schema: { $ref: "#/components/schemas/Identification" }
  schemas:
    # 200
    Completed:
      title: Completed
      description: The operation was successful
      type: string
      pattern: "?????"
      example: "Action successfully completed"
      minLength: 2
      maxLength: 30
   


    Identification:
      title: ID 
      description: General identification number (used for example for users, groups or conversation)
      type: integer
      example: 100
      minimum: 1
    Photo:
      title: Photo
      description: Picture 
      type: string
      format: byte
      minLength: 0
      maxLength: 9999
    Name:
      title: Name
      description: Name of a user or a group
      type: string
      pattern: ^[a-z0-9]{3,13}$
      example: "User123"
      minLength: 3
      maxLength: 13
    Timestamp:
      title: Timestamp
      description: The timestamp of the post.
      type: string
      format: date-time
      pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$"
      example: "2020-12-31T23:59:59"
      minLength: 19
      maxLength: 19
    Profile:
      title: Profile
      description: User profile information
      type: object
      properties:
        username: { $ref: "#/components/schemas/Name" }
        userimg: { $ref: "#/components/schemas/Photo" }
        userid: { $ref: "#/components/schemas/Identification" }
      required:
        - username
        - userid
    ProfilesList:
      title: List of profile
      description: List of profiles, conversation, groups
      type: object
      properties:
        profiles:
          type: array
          description: //
          items: { $ref: "#/components/schemas/Profile" }
          uniqueItems: true
          minItems: 0
          maxItems: 100
      required:
        - profiles
    Text:
      title: Text
      description: Random text
      type: string
      pattern: '^[^\/\\]{0,100}$'
      example: "Hello!"
      minLength: 1
      maxLength: 100
    Reaction:
      title: Reaction
      description: Reaction of a message
      type: object
      properties:
        id_react: { $ref: "#/components/schemas/Identification" }
        emoticon:
          type: string
          description: emoticon
          minLength: 1
          maxLength: 1
          pattern: "?????"
          example: "🇧🇦"
    MsgText:
      title: Message Text
      description: Text in the message
      type: object
      properties:
        text: { $ref: "#/components/schemas/Text" }
        msgid: { $ref: "#/components/schemas/Identification" }
        send_time: { $ref: "#/components/schemas/Timestamp" }
      required:
        - text
        - msgid
        - send_time
    MsgPhoto:
      title: Message Picture
      description: Photo in the message
      type: object
      properties:
        photo: { $ref: "#/components/schemas/Photo" }
        caption: { $ref: "#/components/schemas/Text" }
        msgid: { $ref: "#/components/schemas/Identification" }
        send_time: { $ref: "#/components/schemas/Timestamp" }
      required:
        - photo
        - msgid
        - send_time
    BodyMessage:
      oneOf:
        - $ref: "#/components/schemas/MsgPhoto"
        - $ref: "#/components/schemas/MsgText"
    SentMessage:
      title: Sent message
      description: Message that is sent, using post method in the UserTAG
      type: object
      properties:
        body: { $ref: "#/components/schemas/BodyMessage" }
        status:
          description: Define the status of a message
          type: string
          enum: [didnt_arrive, delivered, seen]
          example: delivered
    RcvMessage:
      title: Recived message
      description: Message that has a delivered property in the SentMessage
      type: object
      properties:
        body: { $ref: "#/components/schemas/BodyMessage" }
        sender_name: { $ref: "#/components/schemas/Name" }
    Message:
      oneOf:
        - $ref: "#/components/schemas/SentMessage"
        - $ref: "#/components/schemas/RcvMessage"
    Group:
      title: Group
      description: Telegram Group
      type: object
      properties:
        groupname: { $ref: "#/components/schemas/Name" }
        groupimg: { $ref: "#/components/schemas/Photo" }
        groupid: { $ref: "#/components/schemas/Identification" }
       
        users: { $ref: "#/components/schemas/ProfilesList" }
      required:
        - groupname
        - groupid
        - users
    Conversation:
      title: Conversation
      description: Conversation between two or more users
      type: object
      properties:
        conv_id: { $ref: "#/components/schemas/Identification" }
        last_msg: { $ref: "#/components/schemas/Message" }
    ConversationCollection:
      title: List of conversations
      description: All conversation of one user
      type: object
      properties:
        conversations:
          type: array
          description: Contains all the conversation of one user
          items: { $ref: "#/components/schemas/Conversation" }
          minItems: 0
          maxItems: 100
      required:
        - conversations
    Error:
      description: some generic errors occured due to some reason
      type: object
      properties:
        errors:
          description: Error codes
          type: array
          items:
            type: object
            description: Error reasoning
            properties:
              code:
                description: Code error
                type: integer
                enum: [400, 401, 403, 404, 500]
                example: 404
              reason:
                type: string
                description: Reason of the error
                pattern: "^"
                example: Page not found
                minLength: 1
                maxLength: 100
              message:
                type: string
                description: More details of the error
                pattern: "?????"
                example: "The requested URL was not found"
                minLength: 1
                maxLength: 100
            required:
              - code
              - reason
          minItems: 1
          maxItems: 100
      required:
        - errors
  responses:
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc)
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    Unauthorized:
      description: The access token is missing or it's expired
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    Forbidden:
      description: The user is not allowed to perform the action
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    NotFound:
      description: Element not found
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }